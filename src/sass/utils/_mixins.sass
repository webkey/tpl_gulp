@import "variables"
// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "")
	$index: str-index($string, $search)

	@if $index
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace)

	@return $string

// =============================================================================
// Font Face
// =============================================================================

=font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg)
	$src: null

	$extmods: (eot: "?", svg: "#" + str-replace($name, " ", "_"))

	$formats: (otf: "opentype", ttf: "truetype")

	@each $ext in $exts
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext)
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext)
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma)

	@font-face
		font-family: quote($name)
		font-style: $style
		font-weight: $weight
		src: $src

// =============================================================================
// for vertical align
// =============================================================================
=for-vertical-align()
	content: ''
	display: inline-block
	vertical-align: middle
	height: 100%

// =============================================================================
// Grid Parent
// =============================================================================
$grid-space: 20px !default
=grid-parent($this-grid-space: $grid-space)
	font-size: 0
	line-height: 1
	letter-spacing: -4px
	margin:
		left: -#{$this-grid-space/2}
		right: -#{$this-grid-space/2}

// =============================================================================
// Grid Item
// =============================================================================
=grid-item($length-in-row: 1, $this-grid-space: $grid-space, $margin-bottom: $this-grid-space)
	display: inline-block
	vertical-align: top
	width: 100%/$length-in-row - 0.02
	padding:
		left: $this-grid-space/2
		right: $this-grid-space/2
	margin-bottom: $margin-bottom

// =============================================================================
// Text transform fix
// =============================================================================
=antialiased()
	-webkit-font-smoothing: antialiased
	-moz-osx-font-smoothing: grayscale
	-webkit-touch-callout: none
	-webkit-user-select: none
	-khtml-user-select: none
	-moz-user-select: none
	-ms-user-select: none
	user-select: none

/// Помощник для сброса внутреннего обтекания
/// @author Николас Галлагер
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
///
=clear()
	&::after
		content: ''
		display: table
		clear: both

/// Обрезает текст и добавляет троеточие
///
=truncate($truncation-boundary: 320px)
	max-width: $truncation-boundary
	white-space: nowrap
	text-overflow: ellipsis
	overflow: hidden

/// Примесь позволяет определять `width` и `height` одновременно.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - `width` элемента
/// @param {Length} $height ($width) - `height` элемента
///
/// @example Sass - Использование
/// .foo
///   +size(10em)
///
/// .bar
///   +size(100%, 10em
///
/// @example css - Вывод CSS
/// .foo {
///   width: 10em;
///   height: 10em;
/// }
///
/// .bar {
///   width: 100%;
///   height: 10em;
/// }
///
=size($width, $height: $width)
	width: $width
	height: $height

/// Примесь добавляет горизонтальные внутренние отстпупы (`padding`) в развернутом виде.
///
/// @author Astronim*
///
/// @access public
///
/// @param {Length} $left - левый `padding` элемента
/// @param {Length} $right - правый `padding` элемента
///
/// @example Sass - Использование
///
/// .foo
///   +padding-horizontal(20px)
///
/// .foo
///   +padding-horizontal(20px, 10px)
///
/// @example css - Вывод CSS
///
/// .foo {
///   padding-left: 20px;
///   padding-right: 20px;
/// }
///
/// .foo {
///   padding-left: 20px;
///   padding-right: 10px;
/// }
///
=padding-horizontal($left, $right: $left)
	padding:
		right: $right
		left: $left

/// Примесь добавляет вертикальные внутренние отстпупы (`padding`) в развернутом виде.
///
/// @author Astronim*
///
/// @access public
///
/// @param {Length} $top - верхний `padding` элемента
/// @param {Length} $bottom - нижний `padding` элемента
///
/// @example Sass - Использование
///
/// .foo
///   +padding-vertical(20px)
///
/// .foo
///   +padding-vertical(20px, 10px)
///
/// @example css - Вывод CSS
///
/// .foo {
///   padding-top: 20px;
///   padding-bottom: 20px;
/// }
///
/// .foo {
///   padding-top: 20px;
///   padding-bottom: 10px;
/// }
///
=padding-vertical($top, $bottom:$top)
	padding:
		top: $top
		bottom: $bottom

/// Примесь добавляет горизонтальные внешние отстпупы (`margin`) в развернутом виде.
///
/// @author Astronim*
///
/// @access public
///
/// @param {Length} $left - левый `margin` элемента
/// @param {Length} $right - правый `margin` элемента
///
/// @example Sass - Использование
///
/// .foo
///   +margin-horizontal(20px)
///
/// .foo
///   +margin-horizontal(20px, 10px)
///
/// @example css - Вывод CSS
///
/// .foo {
///   margin-left: 20px;
///   margin-right: 20px;
/// }
///
/// .foo {
///   margin-left: 20px;
///   margin-right: 10px;
/// }
///
=margin-horizontal($left, $right: $left)
	margin:
		right: $right
		left: $left

/// Примесь добавляет вертикальные внешние отстпупы (`margin`) в развернутом виде.
///
/// @author Astronim*
///
/// @access public
///
/// @param {Length} $top - верхний `margin` элемента
/// @param {Length} $bottom - нижний `margin` элемента
///
/// @example Sass - Использование
///
/// .foo
///   +margin-vertical(20px)
///
/// .foo
///   +margin-vertical(20px, 10px)
///
/// @example css - Вывод CSS
///
/// .foo {
///   margin-top: 20px;
///   margin-bottom: 20px;
/// }
///
/// .foo {
///   margin-top: 20px;
///   margin-bottom: 10px;
/// }
///
=margin-vertical($top, $bottom:$top)
	margin:
		top: $top
		bottom: $bottom

/// Примесь центрирует блочный элемент с ограниченной шириной.
///
/// @author Astronim*
///
/// @access public
///
/// @example Sass - Использование
///
/// .foo
///   +push-auto
///
/// @example css - Вывод CSS
///
/// .foo {
///   margin-left: auto;
///   margin-right: auto;
/// }
///
=push-auto()
	margin:
		left: auto
		right: auto

/// Примесь добавляет к псевдоэлементу базовые свойства.
///
/// @author Astronim*
///
/// @access public
///
/// @param {String} $content [''] - контент псевдоэлемента
/// @param {String} $display [block] - тип псевдоэлемента
/// @param {String} $pos [absolute] - позицирование псевдоэлемента
///
/// @example Sass - Использование
///
/// .foo
///   &::before
///     +pseudo()
///
/// .foo
///   &::before
///     +pseudo(attr(data), inline-block, relative)
///
/// @example css - Вывод CSS
///
/// .foo::before {
///   content: '';
///   display: block;
///   position: absolute;
/// }
///
/// .foo::before {
///   content: attr(data);
///   display: inline-block;
///   position: relative;
/// }
///
=pseudo($content: '', $display: block, $pos: absolute)
	content: $content
	display: $display
	position: $pos

/// Примесь позволяет сохранять пропорции элементов при респонсиве
///
/// @author Astronim*
///
/// @access public
///
/// @param {Number} $x [1] - ширина в пропорциональном соотношении
/// @param {Number} $y [1] - высота в пропорциональном соотношении
/// @param {Boolean} $pseudo [false] - указывает добавлять псевдоэлемент или
/// использовать `padding` самого элемента
///
/// @example Sass - Использование
///
/// .foo
///   +responsive-ratio(1)
///
/// .foo
///   +responsive-ratio(16, 9)
///
/// .foo
///   +responsive-ratio(4, 3, true)
///
/// @example css - Вывод CSS
///
/// .foo {
///   padding-top: 100%
/// }
///
/// .foo {
///   padding-top: 56.25%
/// }
///
/// .foo::before {
///   content: "";
///   display: block;
///   position: relative;
///   height: 0;
///   width: 100%;
///   padding-top: 75%;
/// }
///
=ratio($x: 1, $y: 1, $pseudo: false, $overflow: hidden)
	$padding: ($y / $x * 100%)

	@if $pseudo

		&::before
			+pseudo($pos: relative)

			height: 0
			width: 100%
			padding-top: $padding
	@else
		padding-top: $padding

/// Примесь позволяет указывает изображению способ заполнения блока,
/// в котором находится
/// Для ie9 необходимо подключить скрипт и прописать дополнительные свойства
/// @link https://medium.com/@primozcigler/neat-trick-for-css-object-fit-fallback-on-edge-and-other-browsers-afbc53bbb2c3#.e3eu6mvxl
///
/// @author Astronim*
///
/// @access public
///
/// @param {String} $fit [cover] - метод заполнения
///
/// @example Sass - Использование
///
/// img.foo
///   +object-fit($fit: contain)
///
/// @example css - Вывод CSS
///
/// img.foo {
///   position: relative
///   top: 50%
///   left: 50%
///   max-width: none
///   width: auto
///   min-width: 100%
///   min-height: 100%
///   transform: translate(-50%, -50%)
///   object-fit: $fit
/// }
///
=object-fit($fit: cover)
	position: relative
	top: 50%
	left: 50%
	max-width: none
	width: auto
	min-width: 100%
	min-height: 100%
	transform: translate(-50%, -50%)
	object-fit: $fit



// =============================================================================
// Hide text for screen reader
// =============================================================================
=hide-text()
	border: 0
	clip: rect(0 0 0 0)
	height: 1px
	margin: -1px
	overflow: hidden
	padding: 0
	position: absolute
	width: 1px

// =============================================================================
// Scroll lock
// =============================================================================
=scroll-blocked()
	width: 100% !important
	height: 100% !important
	max-width: 100% !important
	max-height: 100% !important
	margin: 0 !important
	padding: 0 !important
	overflow: hidden !important

// =============================================================================
// button default hover state
// =============================================================================
=btn-hover()
	.no-touchevents &:hover
		background-color: $color-btn-bg-hover

// =============================================================================
// button default active state
// =============================================================================
=btn-active()
	&:active
		transform: scale(0.95)

// =============================================================================
// Leaner gradient -vendor
// =============================================================================
/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
///
@function convert-angle($value, $unit)
	$convertable-units: deg grad turn rad
	$conversion-factors: 1 (10grad / 9deg) (1turn / 360deg) (3.14159rad / 180deg)

	@if index($convertable-units, unit($value)) and index($convertable-units, $unit)
		@return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit))

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`."

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
///
@function is-direction($value)
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value)
	$is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value))

	@return $is-direction or $is-angle

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
///
@function legacy-direction($value)
	@if is-direction($value) == false
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction"

	$conversion-map: (to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right)

	@if map-has-key($conversion-map, $value)
		@return map-get($conversion-map, $value)

	@return 90deg - convert-angle($value, "deg")

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
///
=linear-gradient($direction, $color-stops...)
	@if is-direction($direction) == false
		$color-stops: $direction, $color-stops
		$direction: 180deg

	background: nth(nth($color-stops, 1), 1)
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops)
	background: linear-gradient($direction, $color-stops)

// Tests
//.test-1
//	+linear-gradient(#31B7D7, #EDAC7D)
//
//.test-2
//	+linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%)
//
//.test-3
//	+linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%)