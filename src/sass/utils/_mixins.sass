@import "variables"
// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "")
	$index: str-index($string, $search)

	@if $index
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace)

	@return $string

// =============================================================================
// Font Face
// =============================================================================

=font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg)
	$src: null

	$extmods: (eot: "?", svg: "#" + str-replace($name, " ", "_"))

	$formats: (otf: "opentype", ttf: "truetype")

	@each $ext in $exts
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext)
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext)
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma)

	@font-face
		font-family: quote($name)
		font-style: $style
		font-weight: $weight
		src: $src

// =============================================================================
// for vertical align
// =============================================================================
=for-vertical-align()
	content: ''
	display: inline-block
	vertical-align: middle
	height: 100%

// =============================================================================
// Grid Parent
// =============================================================================
$grid-space: 20px !default
=grid-parent($this-grid-space: $grid-space)
	font-size: 0
	line-height: 1
	letter-spacing: -4px
	margin:
		left: -#{$this-grid-space/2}
		right: -#{$this-grid-space/2}

// =============================================================================
// Grid Item
// =============================================================================
=grid-item($length-in-row: 1, $this-grid-space: $grid-space, $margin-bottom: $this-grid-space)
	display: inline-block
	vertical-align: top
	width: 100%/$length-in-row - 0.02
	padding:
		left: $this-grid-space/2
		right: $this-grid-space/2
	margin-bottom: $margin-bottom

// =============================================================================
// Text transform fix
// =============================================================================
=antialiased()
	-webkit-font-smoothing: antialiased
	-moz-osx-font-smoothing: grayscale
	-webkit-touch-callout: none
	-webkit-user-select: none
	-khtml-user-select: none
	-moz-user-select: none
	-ms-user-select: none
	user-select: none

/// Помощник для сброса внутреннего обтекания
/// @author Николас Галлагер
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
=clear()
	&::after
		content: ''
		display: table
		clear: both

/// Обрезает текст и добавляет троеточие
=ellipsis()
	white-space: nowrap
	text-overflow: ellipsis
	overflow: hidden

// =============================================================================
// Transform -vendor
// =============================================================================
=transform($param...)
	-webkit-transform: $param
	-ms-transform: $param
	transform: $param

// =============================================================================
// Hide text for screen reader
// =============================================================================
=hide-text()
	border: 0
	clip: rect(0 0 0 0)
	height: 1px
	margin: -1px
	overflow: hidden
	padding: 0
	position: absolute
	width: 1px

// =============================================================================
// Scroll lock
// =============================================================================
=scroll-blocked()
	width: 100% !important
	height: 100% !important
	max-width: 100% !important
	max-height: 100% !important
	margin: 0 !important
	padding: 0 !important
	overflow: hidden !important

// =============================================================================
// button default hover state
// =============================================================================
=btn-hover()
	.no-touchevents &:hover
		background-color: $color-btn-bg-hover

// =============================================================================
// button default active state
// =============================================================================
=btn-active()
	&:active
		+transform(scale(0.95))

// =============================================================================
// Leaner gradient -vendor
// =============================================================================
/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit)
	$convertable-units: deg grad turn rad
	$conversion-factors: 1 (10grad / 9deg) (1turn / 360deg) (3.14159rad / 180deg)

	@if index($convertable-units, unit($value)) and index($convertable-units, $unit)
		@return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit))

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`."

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value)
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value)
	$is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value))

	@return $is-direction or $is-angle

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value)
	@if is-direction($value) == false
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction"

	$conversion-map: (to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right)

	@if map-has-key($conversion-map, $value)
		@return map-get($conversion-map, $value)

	@return 90deg - convert-angle($value, "deg")

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
=linear-gradient($direction, $color-stops...)
	@if is-direction($direction) == false
		$color-stops: $direction, $color-stops
		$direction: 180deg

	background: nth(nth($color-stops, 1), 1)
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops)
	background: linear-gradient($direction, $color-stops)

// Tests
//.test-1
//	+linear-gradient(#31B7D7, #EDAC7D)
//
//.test-2
//	+linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%)
//
//.test-3
//	+linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%)